name: Build and Publish NuGet Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0'

    - name: Restore dependencies
      run: dotnet restore **/*.sln

    - name: Build
      run: dotnet build **/*.sln --configuration Release
      
    - name: Get latest NuGet package version
      run: |
        nuget_response=$(curl -s "https://api.nuget.org/v3-flatcontainer/dotTasker/index.json")
        
        echo "NuGet API Response:"
        echo "$nuget_response"
    
        # Parse JSON without jq
        latest_version=$(echo "$nuget_response" | grep -oP '"versions":\s*\[\s*"[^"]+' | tr -d '",' | sort -V | tail -n1)
        
        if [ -z "$latest_version" ]; then
          echo "Error: Unable to determine the latest version from the NuGet API response."
          exit 1
        fi
        
        new_version=$(dotnet nuget increment "$latest_version")
        echo "Latest version: $latest_version"
        echo "New version: $new_version"
        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV



    - name: Show environment variable
      run: |
        echo "NEW_VERSION: $NEW_VERSION"

    - name: Update Nuspec file
      run: |
        nuspec_path="/nuget/Tasker.nuspec"
        sed -i "s/<version>.*<\/version>/<version>${NEW_VERSION}<\/version>/" "$nuspec_path"
        cat "$nuspec_path"

    - name: Pack NuGet package
      run: |
        nuspec_path="/nuget/Tasker.nuspec"
        dotnet pack -p:NuspecFile="$nuspec_path" -p:PackageVersion="${NEW_VERSION}"
      
  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0'

    - name: Push NuGet Package
      run: dotnet nuget push **/*.nupkg --source https://www.nuget.org/api/v3/package --api-key ${{ secrets.NUGET_API_KEY }}
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
